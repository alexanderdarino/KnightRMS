/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CoursePlannerPanel.java
 *
 * Created on Apr 21, 2011, 4:08:43 PM
 */

package KnightRMS;

import KnightEDU.Course;
import KnightEDU.Credits;
import KnightEDU.DBMS.Query.CourseID.PNS.InvalidNumberException;
import KnightEDU.DBMS.Query.CourseID.PNS.InvalidPrefixException;
import KnightEDU.DBMS.Query.CourseID.PNS.InvalidSuffixException;
import KnightEDU.Grade;
import KnightEDU.Grade.Type;
import KnightEDU.CourseID.PNS;
import KnightEDU.DBMS.Query.CourseID.PNS.InvalidNumberException;
import KnightEDU.DBMS.Query.CourseID.PNS.InvalidPrefixException;
import KnightEDU.DBMS.Query.CourseID.PNS.InvalidSuffixException;
import KnightEDU.Prerequisites;
import java.awt.Frame;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Evan
 */
public class CoursePlannerPanel extends javax.swing.JPanel {

    private KnightEDU.DBMS.SQL.DB db;
    private Frame parent;
    private Prerequisites.Builder prereqBuilder = null;

    
    public CoursePlannerPanel(Frame parent, KnightEDU.DBMS.SQL.DB db)
    {
        this();
        this.db = db;
        this.parent = parent;
    }

    /** Creates new form CoursePlannerPanel */
    private CoursePlannerPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        coursePlannerRightPan = new javax.swing.JPanel();
        courseSearchPan = new javax.swing.JPanel();
        courseListScrollPane = new javax.swing.JScrollPane();
        courseList = new javax.swing.JList();
        searchButton = new javax.swing.JButton();
        coursePlannerSeparator = new javax.swing.JSeparator();
        courseInfoPanel = new javax.swing.JPanel();
        courseInfoTopPanel = new javax.swing.JPanel();
        courseIDPanel = new javax.swing.JPanel();
        prefixPanel = new javax.swing.JPanel();
        coursePrefixLab2 = new javax.swing.JLabel();
        prefixField = new javax.swing.JTextField();
        numberPanel = new javax.swing.JPanel();
        courseNumLab = new javax.swing.JLabel();
        numberField = new javax.swing.JTextField();
        suffixPanel = new javax.swing.JPanel();
        courseSuffixLab = new javax.swing.JLabel();
        suffixField = new javax.swing.JTextField();
        courseNamePanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        gradeTypeAndCreditsPanel = new javax.swing.JPanel();
        gradePrefPan = new javax.swing.JPanel();
        gradeTypeLabel = new javax.swing.JLabel();
        gradeTypeBox = new javax.swing.JComboBox();
        creditsPanel = new javax.swing.JPanel();
        minCreditsPanel = new javax.swing.JPanel();
        creditsMinLab = new javax.swing.JLabel();
        minCreditsField = new javax.swing.JTextField();
        maxCreditsPanel = new javax.swing.JPanel();
        creditsMaxLab = new javax.swing.JLabel();
        maxCreditsField = new javax.swing.JTextField();
        semOfferedPan = new javax.swing.JPanel();
        occasionalBox = new javax.swing.JCheckBox();
        semOfferedSeparator = new javax.swing.JSeparator();
        semOfferedSemPan = new javax.swing.JPanel();
        fallLab = new javax.swing.JLabel();
        fallEvenBox = new javax.swing.JCheckBox();
        fallOddBox = new javax.swing.JCheckBox();
        springLab = new javax.swing.JLabel();
        springEvenBox = new javax.swing.JCheckBox();
        springOddBox = new javax.swing.JCheckBox();
        summerLab = new javax.swing.JLabel();
        summerEvenBox = new javax.swing.JCheckBox();
        summerOddBox = new javax.swing.JCheckBox();
        prerequisitesPanel = new javax.swing.JPanel();
        prereqsButtonsPanel = new javax.swing.JPanel();
        addCoursePrereqsButton = new javax.swing.JButton();
        resetPrereqsButton = new javax.swing.JButton();
        prereqTextAreaScrollPane = new javax.swing.JScrollPane();
        prereqTextArea = new javax.swing.JTextArea();
        descriptionAreaPanel = new javax.swing.JPanel();
        descriptionAreaScrollPane = new javax.swing.JScrollPane();
        descriptionArea = new javax.swing.JTextArea();
        courseOptionsInsidePan = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        coursePlannerRightPan.setLayout(new java.awt.BorderLayout());

        courseSearchPan.setBorder(javax.swing.BorderFactory.createTitledBorder("Course Listing"));
        courseSearchPan.setLayout(new java.awt.BorderLayout());

        courseListScrollPane.setViewportView(courseList);

        courseSearchPan.add(courseListScrollPane, java.awt.BorderLayout.CENTER);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        courseSearchPan.add(searchButton, java.awt.BorderLayout.NORTH);

        coursePlannerRightPan.add(courseSearchPan, java.awt.BorderLayout.CENTER);

        add(coursePlannerRightPan);

        coursePlannerSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        add(coursePlannerSeparator);

        courseInfoPanel.setMinimumSize(courseInfoPanel.getPreferredSize());
        courseInfoPanel.setLayout(new java.awt.BorderLayout());

        courseInfoTopPanel.setLayout(new javax.swing.BoxLayout(courseInfoTopPanel, javax.swing.BoxLayout.PAGE_AXIS));

        courseIDPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("CourseID"));

        coursePrefixLab2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        coursePrefixLab2.setText("Prefix: ");
        prefixPanel.add(coursePrefixLab2);

        prefixField.setColumns(3);
        prefixField.setMinimumSize(prefixField.getPreferredSize());
        prefixField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prefixFieldActionPerformed(evt);
            }
        });
        prefixPanel.add(prefixField);

        courseIDPanel.add(prefixPanel);

        numberPanel.setLayout(new java.awt.GridBagLayout());

        courseNumLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        courseNumLab.setText(" Number: ");
        numberPanel.add(courseNumLab, new java.awt.GridBagConstraints());

        numberField.setColumns(4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        numberPanel.add(numberField, gridBagConstraints);

        courseIDPanel.add(numberPanel);

        suffixPanel.setLayout(new java.awt.GridBagLayout());

        courseSuffixLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        courseSuffixLab.setText(" Suffix: ");
        suffixPanel.add(courseSuffixLab, new java.awt.GridBagConstraints());

        suffixField.setColumns(1);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        suffixPanel.add(suffixField, gridBagConstraints);

        courseIDPanel.add(suffixPanel);

        courseInfoTopPanel.add(courseIDPanel);

        courseNamePanel.setLayout(new java.awt.GridBagLayout());

        nameLabel.setText("Name:");
        courseNamePanel.add(nameLabel, new java.awt.GridBagConstraints());

        nameField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        courseNamePanel.add(nameField, gridBagConstraints);

        courseInfoTopPanel.add(courseNamePanel);

        gradeTypeAndCreditsPanel.setLayout(new javax.swing.BoxLayout(gradeTypeAndCreditsPanel, javax.swing.BoxLayout.X_AXIS));

        gradeTypeLabel.setText("Grade Type:");
        gradePrefPan.add(gradeTypeLabel);

        gradeTypeBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Letter", "S / U" }));
        gradeTypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeTypeBoxActionPerformed(evt);
            }
        });
        gradePrefPan.add(gradeTypeBox);

        gradeTypeAndCreditsPanel.add(gradePrefPan);

        creditsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Credits"));
        creditsPanel.setLayout(new javax.swing.BoxLayout(creditsPanel, javax.swing.BoxLayout.LINE_AXIS));

        minCreditsPanel.setMinimumSize(minCreditsPanel.getPreferredSize());

        creditsMinLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        creditsMinLab.setText("Min: ");
        minCreditsPanel.add(creditsMinLab);

        minCreditsField.setColumns(2);
        minCreditsPanel.add(minCreditsField);

        creditsPanel.add(minCreditsPanel);

        maxCreditsPanel.setMinimumSize(maxCreditsPanel.getPreferredSize());

        creditsMaxLab.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        creditsMaxLab.setText("Max: ");
        maxCreditsPanel.add(creditsMaxLab);

        maxCreditsField.setColumns(2);
        maxCreditsPanel.add(maxCreditsField);

        creditsPanel.add(maxCreditsPanel);

        gradeTypeAndCreditsPanel.add(creditsPanel);

        courseInfoTopPanel.add(gradeTypeAndCreditsPanel);

        semOfferedPan.setBorder(javax.swing.BorderFactory.createTitledBorder("Semesters Offered"));
        semOfferedPan.setLayout(new javax.swing.BoxLayout(semOfferedPan, javax.swing.BoxLayout.LINE_AXIS));

        occasionalBox.setText("Occasional");
        occasionalBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        occasionalBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                occasionalBoxActionPerformed(evt);
            }
        });
        semOfferedPan.add(occasionalBox);

        semOfferedSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        semOfferedPan.add(semOfferedSeparator);

        semOfferedSemPan.setLayout(new java.awt.GridBagLayout());

        fallLab.setText("     Fall:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        semOfferedSemPan.add(fallLab, gridBagConstraints);

        fallEvenBox.setText("Even");
        fallEvenBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        semOfferedSemPan.add(fallEvenBox, new java.awt.GridBagConstraints());

        fallOddBox.setText("Odd");
        fallOddBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        fallOddBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fallOddBoxActionPerformed(evt);
            }
        });
        semOfferedSemPan.add(fallOddBox, new java.awt.GridBagConstraints());

        springLab.setText("     Spring:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        semOfferedSemPan.add(springLab, gridBagConstraints);

        springEvenBox.setText("Even");
        springEvenBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        springEvenBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                springEvenBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        semOfferedSemPan.add(springEvenBox, gridBagConstraints);

        springOddBox.setText("Odd");
        springOddBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        semOfferedSemPan.add(springOddBox, gridBagConstraints);

        summerLab.setText("     Summer:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        semOfferedSemPan.add(summerLab, gridBagConstraints);

        summerEvenBox.setText("Even");
        summerEvenBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        semOfferedSemPan.add(summerEvenBox, gridBagConstraints);

        summerOddBox.setText("Odd");
        summerOddBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        semOfferedSemPan.add(summerOddBox, gridBagConstraints);

        semOfferedPan.add(semOfferedSemPan);

        courseInfoTopPanel.add(semOfferedPan);

        prerequisitesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Prerequisites"));
        prerequisitesPanel.setLayout(new java.awt.BorderLayout());

        prereqsButtonsPanel.setLayout(new java.awt.GridLayout(1, 0));

        addCoursePrereqsButton.setText("Add Course Prerequisites");
        addCoursePrereqsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCoursePrereqsButtonActionPerformed(evt);
            }
        });
        prereqsButtonsPanel.add(addCoursePrereqsButton);

        resetPrereqsButton.setText("Reset Prerequisites");
        resetPrereqsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetPrereqsButtonActionPerformed(evt);
            }
        });
        prereqsButtonsPanel.add(resetPrereqsButton);

        prerequisitesPanel.add(prereqsButtonsPanel, java.awt.BorderLayout.SOUTH);

        prereqTextAreaScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        prereqTextArea.setColumns(20);
        prereqTextArea.setEditable(false);
        prereqTextArea.setLineWrap(true);
        prereqTextArea.setRows(5);
        prereqTextAreaScrollPane.setViewportView(prereqTextArea);

        prerequisitesPanel.add(prereqTextAreaScrollPane, java.awt.BorderLayout.PAGE_START);

        courseInfoTopPanel.add(prerequisitesPanel);

        courseInfoPanel.add(courseInfoTopPanel, java.awt.BorderLayout.NORTH);

        descriptionAreaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));
        descriptionAreaPanel.setLayout(new java.awt.BorderLayout());

        descriptionAreaScrollPane.setHorizontalScrollBar(null);
        descriptionAreaScrollPane.setPreferredSize(new java.awt.Dimension(200, 96));

        descriptionArea.setColumns(10000);
        descriptionArea.setLineWrap(true);
        descriptionArea.setRows(5);
        descriptionAreaScrollPane.setViewportView(descriptionArea);

        descriptionAreaPanel.add(descriptionAreaScrollPane, java.awt.BorderLayout.CENTER);

        courseInfoPanel.add(descriptionAreaPanel, java.awt.BorderLayout.CENTER);

        courseOptionsInsidePan.setLayout(new java.awt.GridLayout(1, 2));

        saveButton.setText("Save Course");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        courseOptionsInsidePan.add(saveButton);

        removeButton.setText("Remove Course");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        courseOptionsInsidePan.add(removeButton);

        courseInfoPanel.add(courseOptionsInsidePan, java.awt.BorderLayout.PAGE_END);

        add(courseInfoPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void occasionalBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_occasionalBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_occasionalBoxActionPerformed

    private void fallOddBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fallOddBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_fallOddBoxActionPerformed

    private void springEvenBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_springEvenBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_springEvenBoxActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        // Get courseID elements.
        String prefix = prefixField.getText();
        String number = numberField.getText();
        String suffix = suffixField.getText();

        // Check to make sure the CourseID fields are filled out.
        if(prefix == null || number == null || suffix == null)
            JOptionPane.showMessageDialog(CoursePlannerPanel.this, "Please specify a valid course ID.");

        // Convert to courseID.
        KnightEDU.CourseID.PNS courseID = KnightEDU.CourseID.PNS.create(prefix, number, suffix);

        // If course is in database, update course.
        if (this.db.containsCourse(courseID.toString()))
        {
            KnightEDU.Course c = db.getCourse(courseID.toString());
            Credits credits = null;

            // Update elements.
            c.setName(nameField.getText());
            c.setDescription(descriptionArea.getText());

            // At least one of the credit fields must contain data.
            if(minCreditsField == null && maxCreditsField == null)
                JOptionPane.showMessageDialog(CoursePlannerPanel.this, "Please enter min and/or max credits.");
            else if(minCreditsField != null && maxCreditsField != null)
            {
                int min = Integer.parseInt(minCreditsField.getText());
                int max = Integer.parseInt(maxCreditsField.getText());
                credits = Credits.createCredits(min, max);
            }
            else if(minCreditsField == null)
            {
                int cMax = Integer.parseInt(maxCreditsField.getText());
                credits = Credits.createCredits(cMax);
            }
            else
            {
                int cMin = Integer.parseInt(minCreditsField.getText());
                credits = Credits.createCredits(cMin);
            }

            // Update specified elements.
            c.setCredits(credits);
            c.setGradeType((Type) gradeTypeBox.getSelectedItem());
        }

        // If course is not in database, add new course.
        else
        {
            Credits credits = null;
            if(minCreditsField == null && maxCreditsField == null)
                JOptionPane.showMessageDialog(CoursePlannerPanel.this, "Please enter min and/or max credits.");
            else if(minCreditsField != null && maxCreditsField != null)
            {
                int min = Integer.parseInt(minCreditsField.getText());
                int max = Integer.parseInt(maxCreditsField.getText());
                credits = Credits.createCredits(min, max);
            }
            else if(minCreditsField == null){
                int c = Integer.parseInt(maxCreditsField.getText());
                credits = Credits.createCredits(c);
            }
            else {
                int c = Integer.parseInt(minCreditsField.getText());
                credits = Credits.createCredits(c);
            }


            Grade.Type type = (Type)gradeTypeBox.getSelectedItem();

            // Add the course to the database.
            //db.addCourse(String courseID, String name, String description, Credits credits, Grade.Type gradeType);
            db.addCourse(courseID.toString(), nameField.getText(), descriptionArea.getText(), credits, type);
        }

        // Save any prerequisite changes.
        Course c = db.getCourse(courseID.toString());
        c.setPrerequisites(prereqBuilder.build());
        db.updateCourse(c);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // Get courseID elements.
        String prefix = prefixField.getText();
        String number = numberField.getText();
        String suffix = suffixField.getText();
        // Convert to courseID.
        KnightEDU.CourseID.PNS courseID = KnightEDU.CourseID.PNS.create(prefix, number, suffix);
        
        // Check to make sure there is a course selected.
        if (courseList.getSelectedValue() != null)
        {
            db.removeCourse(courseID.toString());
        }

        // If not course is selected, display error msg.
        else
        {
            JOptionPane.showMessageDialog(CoursePlannerPanel.this, "Please select a course to remove.");
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        KnightEDU.DBMS.Query.Course courseQuery = db.queryCourse();
        KnightEDU.DBMS.Query.CourseID.PNS courseIDQuery = (KnightEDU.DBMS.Query.CourseID.PNS) courseQuery.specifyCourseID();
        if (hasPrefix()) {
            try {
                courseIDQuery = courseIDQuery.containsPrefix(prefixField.getText());
            } catch (InvalidPrefixException ex) {
                Logger.getLogger(CoursePlannerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (hasNumber()) {
            try {
                courseIDQuery = courseIDQuery.containsNumberEqualTo(numberField.getText());
            } catch (InvalidNumberException ex) {
                Logger.getLogger(CoursePlannerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (hasSuffix()) {
            try {
                courseIDQuery = courseIDQuery.containsSuffix(suffixField.getText());
            } catch (InvalidSuffixException ex) {
                Logger.getLogger(CoursePlannerPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        courseQuery = courseIDQuery.build();
        if (hasName()) {
            courseQuery = courseQuery.nameContains(nameField.getText());
        }
        Set<KnightEDU.Course> results = courseQuery.invoke();

        courseList.setListData(results.toArray());
        courseList.getSelectedValue();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void gradeTypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeTypeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeTypeBoxActionPerformed

    private void prefixFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prefixFieldActionPerformed
    {//GEN-HEADEREND:event_prefixFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_prefixFieldActionPerformed

    private void addCoursePrereqsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCoursePrereqsButtonActionPerformed

        String prefix = prefixField.getText();
        String number = numberField.getText();
        String suffix = suffixField.getText();

        // Concatenate elements.
        KnightEDU.CourseID cID = KnightEDU.CourseID.PNS.create(prefix, number, suffix);

        // Course not selected
        if (prefixField == null || numberField == null || suffixField == null) {
            JOptionPane.showMessageDialog(null, "Valid Course ID required");
            return;
        }
        else
        {
            Prerequisites.Builder b;
            b = PrereqEdit.showDialog();

            if (b == null) return;

            if (prereqBuilder == null)
            {
                prereqBuilder = b;
                prereqTextArea.setText(prereqBuilder.build().toString());
                return;
            }

            prereqBuilder = prereqBuilder.and(b);

            prereqTextArea.setText(prereqBuilder.build().toString());
        }
    }//GEN-LAST:event_addCoursePrereqsButtonActionPerformed

    private void resetPrereqsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetPrereqsButtonActionPerformed
        prereqBuilder = null;
        prereqTextArea.setText("");
    }//GEN-LAST:event_resetPrereqsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCoursePrereqsButton;
    private javax.swing.JPanel courseIDPanel;
    private javax.swing.JPanel courseInfoPanel;
    private javax.swing.JPanel courseInfoTopPanel;
    private javax.swing.JList courseList;
    private javax.swing.JScrollPane courseListScrollPane;
    private javax.swing.JPanel courseNamePanel;
    private javax.swing.JLabel courseNumLab;
    private javax.swing.JPanel courseOptionsInsidePan;
    private javax.swing.JPanel coursePlannerRightPan;
    private javax.swing.JSeparator coursePlannerSeparator;
    private javax.swing.JLabel coursePrefixLab2;
    private javax.swing.JPanel courseSearchPan;
    private javax.swing.JLabel courseSuffixLab;
    private javax.swing.JLabel creditsMaxLab;
    private javax.swing.JLabel creditsMinLab;
    private javax.swing.JPanel creditsPanel;
    private javax.swing.JTextArea descriptionArea;
    private javax.swing.JPanel descriptionAreaPanel;
    private javax.swing.JScrollPane descriptionAreaScrollPane;
    private javax.swing.JCheckBox fallEvenBox;
    private javax.swing.JLabel fallLab;
    private javax.swing.JCheckBox fallOddBox;
    private javax.swing.JPanel gradePrefPan;
    private javax.swing.JPanel gradeTypeAndCreditsPanel;
    private javax.swing.JComboBox gradeTypeBox;
    private javax.swing.JLabel gradeTypeLabel;
    private javax.swing.JTextField maxCreditsField;
    private javax.swing.JPanel maxCreditsPanel;
    private javax.swing.JTextField minCreditsField;
    private javax.swing.JPanel minCreditsPanel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField numberField;
    private javax.swing.JPanel numberPanel;
    private javax.swing.JCheckBox occasionalBox;
    private javax.swing.JTextField prefixField;
    private javax.swing.JPanel prefixPanel;
    private javax.swing.JTextArea prereqTextArea;
    private javax.swing.JScrollPane prereqTextAreaScrollPane;
    private javax.swing.JPanel prereqsButtonsPanel;
    private javax.swing.JPanel prerequisitesPanel;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton resetPrereqsButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel semOfferedPan;
    private javax.swing.JPanel semOfferedSemPan;
    private javax.swing.JSeparator semOfferedSeparator;
    private javax.swing.JCheckBox springEvenBox;
    private javax.swing.JLabel springLab;
    private javax.swing.JCheckBox springOddBox;
    private javax.swing.JTextField suffixField;
    private javax.swing.JPanel suffixPanel;
    private javax.swing.JCheckBox summerEvenBox;
    private javax.swing.JLabel summerLab;
    private javax.swing.JCheckBox summerOddBox;
    // End of variables declaration//GEN-END:variables


        public boolean hasCompleteCourseID()
    {
        if (prefixField.getText() != null && numberField.getText() != null && suffixField.getText() != null)
            return true;
        else
            return false;
    }

    public boolean hasPartialCourseID()
    {
        if (nameField.getText() != null || numberField.getText() != null || suffixField.getText() != null)
            return true;
        else
            return false;
    }

    public boolean hasPrefix()
    {
        if (prefixField.getText() != null)
            return true;
        else
            return false;
    }

    public boolean hasNumber()
    {
        if (numberField.getText() != null)
            return true;
        else
            return false;
    }

    public boolean hasSuffix()
    {
        if (suffixField.getText() != null)
            return true;
        else
            return false;
    }

    public boolean hasName()
    {
        if (nameField.getText() != null)
            return true;
        else
            return false;
    }

    public boolean hasDescription()
    {
        if (descriptionArea.getText() != null)
            return true;
        else
            return false;
    }
}
